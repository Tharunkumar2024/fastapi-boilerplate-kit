"""
The file have generation code for the boilerplate
"""

# pylint: disable=C0116

import os


def generate_project(project_name, sqlalchemy=False, alembic=False):
    project_dir = project_name

    # Create directory structure
    create_directories(project_dir)

    # Generate base files (README, Dockerfile, etc.)
    create_file(
        os.path.join(project_dir, "README.md"),
        "This is a FastAPI project generated by fastapi-boilerplate."
    )
    create_file(os.path.join(project_dir, ".gitignore"), "*.pyc\n__pycache__/\n.env")
    create_file(os.path.join(project_dir, "Dockerfile"), generate_dockerfile())

    # Generate FastAPI app entry point (main.py)
    create_file(os.path.join(project_dir, "app/main.py"), generate_main_py())

    # Generate environment variables
    generate_env(project_dir, sqlalchemy)

    # Generate core files
    create_core_files(project_dir)

    # Generate API files (endpoints and models)
    create_api_files(project_dir)

    # Generate database-related files if using SQLAlchemy
    if sqlalchemy:
        create_db_files(project_dir)

    # Generate Alembic configuration if using Alembic
    if alembic:
        create_alembic_config(project_dir)


def create_directories(base_path):
    dirs = [
        "app",
        "app/api/v1/endpoints",
        "app/db/versions",
        "app/migrations",
        "app/core",
    ]
    for dir_ in dirs:
        os.makedirs(os.path.join(base_path, dir_), exist_ok=True)


def create_file(file_path, content):
    """Helper function to create a file and write content"""
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)


def generate_dockerfile():
    """Dockerfile template for FastAPI app"""
    return """
FROM python:3.9

# Set working directory
WORKDIR /app

# Install dependencies
COPY requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

# Copy the app code
COPY . /app

# Expose port
EXPOSE 8000

# Run the app
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
"""


def generate_main_py():
    """Main FastAPI app entry point"""
    return """
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
def read_root():
    return {"message": "Welcome to FastAPI!"}
"""


def generate_env(project_dir, sqlalchemy):
    """Generate .env configuration"""
    env_content = "DATABASE_URL=sqlite:///./test.db\n"
    if sqlalchemy:
        env_content += "SQLALCHEMY_DATABASE_URL=sqlite:///./test.db\n"
    with open(os.path.join(project_dir, ".env"), "w", encoding="utf-8") as f:
        f.write(env_content)


def create_core_files(project_dir):
    """Generate core files for config and security"""
    # config.py
    create_file(os.path.join(project_dir, "app/core/config.py"), """
import os

class Settings:
    DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///./test.db")

settings = Settings()
""")

    # security.py
    create_file(os.path.join(project_dir, "app/core/security.py"), """
# Security utilities for JWT, password hashing, etc.
from passlib.context import CryptContext

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)
""")


def create_api_files(project_dir):
    """Generate API route and model files"""
    # v1/endpoints/user.py (API endpoint example)
    create_file(os.path.join(project_dir, "app/api/v1/endpoints/user.py"), """
from fastapi import APIRouter

router = APIRouter()

@router.get("/users")
def get_users():
    return [{"username": "user1"}, {"username": "user2"}]
""")

    # v1/models.py (Pydantic models example)
    create_file(os.path.join(project_dir, "app/api/v1/models.py"), """
from pydantic import BaseModel

class User(BaseModel):
    username: str
    email: str
""")


def create_db_files(project_dir):
    """Generate SQLAlchemy database files"""
    # models.py (SQLAlchemy models)
    create_file(os.path.join(project_dir, "app/db/models.py"), """
from sqlalchemy import Column, Integer, String
from app.db.session import Base

class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, index=True)
    email = Column(String, unique=True, index=True)
""")

    # crud.py (CRUD operations)
    create_file(os.path.join(project_dir, "app/db/crud.py"), """
from sqlalchemy.orm import Session
from . import models

def create_user(db: Session, username: str, email: str):
    db_user = models.User(username=username, email=email)
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user
""")

    # session.py (SQLAlchemy session management)
    create_file(os.path.join(project_dir, "app/db/session.py"), """
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from app.core.config import settings

SQLALCHEMY_DATABASE_URL = settings.DATABASE_URL

engine = create_engine(SQLALCHEMY_DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
""")


def create_alembic_config(project_dir):
    """Generate Alembic migration files"""
    create_file(os.path.join(project_dir, "alembic.ini"), """
[alembic]
script_location = app/migrations
sqlalchemy.url = driver://user:pass@localhost/dbname
""")
    os.makedirs(os.path.join(project_dir, "app/migrations/versions"), exist_ok=True)
